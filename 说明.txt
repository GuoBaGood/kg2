·① 在src/main/resources:创建一个application.properties（名字必须统一）文件——设置全局:
	全局包括：端口号、程序运行的入口地址
·② 在application.yml文件格式中：
	server：
		port： 8088
		context-path： /hxl
	即不用每次都要写server了，记得：后面加空格
·③ spring-boot-starter-...————————成为starter pom:即jar包
·④ 程序的入口改为了.../hxl;那么再次写一个入口的时候，路径为：http://localhost:8088/hxl/D/yyys
·⑤ 通过@Value的注解获取到属性值：
	@Value("${book.name}")
	private String name;
	但有个问题：如果全局变量文件中的变量特别多的话：
	所以第二种办法：
	·在application.properties文件中添加：
		stu.age=12
		stu.sex=boy
	·在类上方写一个注释@ConfigurationProperties(prefix="stu")//其中参数是全局变量开头发那个
	·在controller中的私有全局变量，其中变量名要与stu后缀保持一致：
		private int age;
	 	private String sex;
	·千万要记住变量的set/get方法；
	只写一个注释，可以使用多个了；
·⑥两种启动方法：
	·在主类点击run as ——java application
	·右击项目——run as —— Spring boot APP
·⑦profile的配置
	针对不同的环境对不同的配置提供支持：如果把所有的全局变量都写在application.properties文件中，多而不好区分；
	为解决这些问题：application-*.properties文件：
		application-prod.properties;//生产环境的；
		application-sit.properties; //测试环境的；
		application-dev.properties; //开发环境下；
	那么到底用哪个呢？所有在全局变量文件application.properties中就去指明到底用哪个:
		spring.profiles.active=prod //表明要要应用生产环境那个；
		比如在开发环境下的端口号：8088；在测试找中用到的为8099；所有可以在全局配置文件里去指明用哪个；
·⑧自动配置的原理：
待续。。。。继续学习
	